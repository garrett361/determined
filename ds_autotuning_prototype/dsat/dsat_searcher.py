import argparse
import copy
import logging
import uuid
from typing import Any, Dict, List

import determined as det
from determined import searcher
from dsat import constants
from ruamel import yaml


class DSATSearchMethod(searcher.SearchMethod):
    def __init__(self, profiling_results_dict: Dict[str, Any], original_config_dict) -> None:
        self.profiling_results_dict = profiling_results_dict
        self.original_config_dict = original_config_dict
        self.running_trials = 0

    def _get_list_of_hparams(self) -> List[Dict[str, Any]]:
        hparams = self.original_config_dict[
            "hyperparameters"
        ]  # Just testing by running original exp
        hparams["ds_config"]["flops_profiler"] = constants.FLOPS_PROFILER_CONFIG
        return 3 * [hparams]

    ############################################################################
    # Invoked only once, when starting a new experiment. Creates initial list
    # of operations.
    # In this example, we create and submit operations for first N trials, such that:
    #   1) each trial is assigned a unique request_id and every operation
    #      contains request_id of a trial it refers to;
    #   2) each trial is initialized with two operations:
    #      -> "Create" operation that takes in trial's request_id and hyperparameters;
    #         in this example hyperparameters are generated by user-defined method
    #         search_space(),
    #      -> "ValidateAfter" operation that takes in trial's request_id and number of
    #         units (batches or epochs) that the model is trained for before validation;
    #         units selection is made in the custom_config.yaml.
    #
    # Note: the order in which trials are created is not guaranteed.
    def initial_operations(self, _: searcher.SearcherState) -> List[searcher.Operation]:
        operations = []
        for hp_dict in self._get_list_of_hparams():
            create = searcher.Create(
                request_id=uuid.uuid4(),
                hparams=hp_dict,
                checkpoint=None,
            )
            run = searcher.ValidateAfter(
                request_id=create.request_id, length=constants.MODEL_INFO_MAX_LENGTH
            )
            operations.append(create)
            operations.append(run)

        return operations

    def on_trial_created(
        self, _: searcher.SearcherState, request_id: uuid.UUID
    ) -> List[searcher.Operation]:
        self.running_trials += 1
        print(f"Creating trial {request_id}, {self.running_trials} remaining")
        return []

    def on_validation_completed(
        self, _: searcher.SearcherState, request_id: uuid.UUID, metric: float, train_length: int
    ) -> List[searcher.Operation]:
        print(f"Completed trial {request_id}")
        return [searcher.Close(request_id=request_id)]

    def on_trial_closed(
        self, _: searcher.SearcherState, request_id: uuid.UUID
    ) -> List[searcher.Operation]:
        self.running_trials -= 1
        print(f"Closing trial {request_id}, {self.running_trials} remaining")
        if not self.running_trials:
            return [searcher.Shutdown()]
        return []

    def on_trial_exited_early(
        self,
        _: searcher.SearcherState,
        request_id: uuid.UUID,
        exited_reason: searcher.ExitedReason,
    ) -> List[searcher.Operation]:
        return []

    def progress(self, _: searcher.SearcherState) -> float:
        return 0


def get_parsed_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("-c", "--config_path", type=str, default="")

    parsed_args = parser.parse_args()

    return parsed_args


def main(core_context: det.core.Context) -> None:
    info = det.get_cluster_info()
    model_info_profiling_results_dict = info.trial.hparams["results"]

    args = get_parsed_args()

    original_config = yaml.YAML(typ="safe")
    with open(args.config_path, "r") as f:
        original_config_dict = original_config.load(f)
    # Instantiate your implementation of SearchMethod
    search_method = DSATSearchMethod(model_info_profiling_results_dict, original_config_dict)

    # Instantiate RemoteSearchRunner
    search_runner = searcher.RemoteSearchRunner(search_method, context=core_context)

    ########################################################################
    # Run RemoteSearchRunner
    # ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    # 1) Creates new experiment or loads state:
    #      -> if checkpoint for an experiment exists, then RemoteSearchRunner loads its own state
    #         and invokes SearchMethod.load_method_state() to restore SearchMethod state;
    #      -> otherwise, new experiment is created.
    # 2) Handles communication between the multi-trial experiment and the custom SearchMethod
    # 3) Exits when the experiment is completed.

    # Do we need to delete the hp field?
    original_config_dict_copy = copy.deepcopy(original_config_dict)
    del original_config_dict_copy["hyperparameters"]
    original_config_dict_copy["name"] += " (autotuning trials)"
    print("dict used in search_runner.run", original_config_dict_copy)
    search_runner.run(original_config_dict_copy, model_dir=".")


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, format=det.LOG_FORMAT)
    with det.core.init() as core_context:
        main(core_context)
